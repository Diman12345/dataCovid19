{"version":3,"file":"index.js","sources":["../../../src/@ionic-native/plugins/firebase/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cordova, IonicNativePlugin, Plugin } from '@ionic-native/core';\nimport { Observable } from 'rxjs/Observable';\n\n/**\n * @name Firebase\n * @description\n * This plugin brings push notifications, analytics, event tracking, crash reporting and more from Google Firebase to your Cordova project! Android and iOS supported (including iOS 10).\n *\n * @usage\n * ```typescript\n * import { Firebase } from '@ionic-native/firebase';\n *\n * constructor(private firebase: Firebase) { }\n *\n * ...\n *\n * this.firebase.getToken()\n *   .then(token => console.log(`The token is ${token}`)) // save the token server-side and use it to push notifications to this device\n *   .catch(error => console.error('Error getting token', error));\n *\n * this.firebase.onNotificationOpen()\n *    .subscribe(data => console.log(`User opened a notification ${data}`));\n *\n * this.firebase.onTokenRefresh()\n *   .subscribe((token: string) => console.log(`Got a new token ${token}`));\n *\n * ```\n */\n@Plugin({\n  pluginName: 'Firebase',\n  plugin: 'cordova-plugin-firebase',\n  pluginRef: 'FirebasePlugin',\n  repo: 'https://github.com/arnesson/cordova-plugin-firebase',\n  platforms: ['Android', 'iOS']\n})\n@Injectable()\nexport class Firebase extends IonicNativePlugin {\n  /**\n   * Get the device token\n   * @return {Promise<null | string>} Note that token will be null if it has not been established yet\n   */\n  @Cordova()\n  getToken(): Promise<null | string> {\n    return;\n  }\n\n  /**\n   * Get notified when a token is refreshed\n   * @return {Observable<any>}\n   */\n  @Cordova({\n    observable: true\n  })\n  onTokenRefresh(): Observable<any> {\n    return;\n  }\n\n  /**\n   * Get notified when the user opens a notification\n   * @return {Observable<any>}\n   */\n  @Cordova({\n    observable: true\n  })\n  onNotificationOpen(): Observable<any> {\n    return;\n  }\n\n  /**\n   * Grant permission to receive push notifications\n   * @return {Promise<any>}\n   */\n  @Cordova({\n    platforms: ['iOS']\n  })\n  grantPermission(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Check permission to receive push notifications\n   * @return {Promise<{isEnabled: boolean}>}\n   */\n  @Cordova()\n  hasPermission(): Promise<{ isEnabled: boolean }> {\n    return;\n  }\n\n  /**\n   * Set icon badge number. Set to 0 to clear the badge.\n   * @param {number} badgeNumber\n   * @return {Promise<any>}\n   */\n  @Cordova()\n  setBadgeNumber(badgeNumber: number): Promise<any> {\n    return;\n  }\n\n  /**\n   * Get icon badge number\n   * @return {Promise<any>}\n   */\n  @Cordova()\n  getBadgeNumber(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Subscribe to a topic\n   * @param {string} topic\n   * @return {Promise<any>}\n   */\n  @Cordova()\n  subscribe(topic: string): Promise<any> {\n    return;\n  }\n\n  /**\n   * Unsubscribe from a topic\n   * @param {string} topic\n   * @return {Promise<any>}\n   */\n  @Cordova()\n  unsubscribe(topic: string): Promise<any> {\n    return;\n  }\n\n  /**\n   * Unregister from firebase, used to stop receiving push notifications.\n   * Call this when you logout user from your app.\n   */\n  @Cordova()\n  unregister(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Log an event using Analytics\n   * @param {string} type\n   * @param {Object} data\n   * @return {Promise<any>}\n   */\n  @Cordova()\n  logEvent(type: string, data: any): Promise<any> {\n    return;\n  }\n\n  /**\n   * Log an Error using FirebaseCrash\n   * @param {string} message\n   * @return {Promise<any>}\n   */\n  @Cordova()\n  logError(message: string): Promise<any> {\n    return;\n  }\n\n  /**\n   * Set the name of the current screen in Analytics\n   * @param {string} name Screen name\n   * @return {Promise<any>}\n   */\n  @Cordova()\n  setScreenName(name: string): Promise<any> {\n    return;\n  }\n\n  /**\n   * Set a user id for use in Analytics\n   * @param {string} userId\n   * @return {Promise<any>}\n   */\n  @Cordova()\n  setUserId(userId: string): Promise<any> {\n    return;\n  }\n\n  /**\n   * Set a user property for use in Analytics\n   * @param {string} name\n   * @param {string} value\n   * @return {Promise<any>}\n   */\n  @Cordova()\n  setUserProperty(name: string, value: string): Promise<any> {\n    return;\n  }\n\n  /**\n   * Fetch Remote Config parameter values for your app\n   * @param {number} [cacheExpirationSeconds]\n   * @return {Promise<any>}\n   */\n  @Cordova({\n    successIndex: 1,\n    errorIndex: 2\n  })\n  fetch(cacheExpirationSeconds?: number): Promise<any> {\n    return;\n  }\n\n  /**\n   * Activate the Remote Config fetched config\n   * @return {Promise<any>}\n   */\n  @Cordova()\n  activateFetched(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Retrieve a Remote Config value\n   * @param {string} key\n   * @param {string} [namespace]\n   * @return {Promise<any>}\n   */\n  @Cordova({\n    successIndex: 2,\n    errorIndex: 3\n  })\n  getValue(key: string, namespace?: string): Promise<any> {\n    return;\n  }\n\n  /**\n   * Retrieve a Remote Config byte array\n   * @param {string} key\n   * @param {string} [namespace]\n   * @return {Promise<any>}\n   */\n  @Cordova({\n    platforms: ['Android']\n  })\n  getByteArray(key: string, namespace?: string): Promise<any> {\n    return;\n  }\n\n  /**\n   * Get the current state of the FirebaseRemoteConfig singleton object\n   * @return {Promise<any>}\n   */\n  @Cordova({\n    platforms: ['Android']\n  })\n  getInfo(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Change the settings for the FirebaseRemoteConfig object's operations\n   * @param {Object} settings\n   * @return {Promise<any>}\n   */\n  @Cordova({\n    platforms: ['Android']\n  })\n  setConfigSettings(settings: any): Promise<any> {\n    return;\n  }\n\n  /**\n   * Set defaults in the Remote Config\n   * @param {Object} defaults\n   * @param {string} [namespace]\n   * @return {Promise<any>}\n   */\n  @Cordova({\n    platforms: ['Android']\n  })\n  setDefaults(defaults: any, namespace?: string): Promise<any> {\n    return;\n  }\n\n  /**\n   * Start a trace.\n   * @param {string} trace Trace name\n   */\n  @Cordova()\n  startTrace(trace: string): Promise<any> {\n    return;\n  }\n\n  /**\n   * To count the performance-related events that occur in your app (such as cache hits or retries), add a line of code\n   * similar to the following whenever the event occurs, using a string other than retry to name that event if you are\n   * counting a different type of event:\n   * @param {string} trace Trace name\n   * @param {string} counter Counter\n   */\n  @Cordova()\n  incrementCounter(trace: string, counter: string): Promise<any> {\n    return;\n  }\n\n  /**\n   * Stop the trace\n   * @param {string} trace Trace name\n   */\n  @Cordova()\n  stopTrace(trace: string): void {}\n\n  /**\n   * Allows the user to enable/disable analytics collection\n   * @param {boolean} enabled value to set collection\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  setAnalyticsCollectionEnabled(enabled: boolean): Promise<any> {\n    return;\n  }\n\n  /**\n   * Allows the user to set User Identifier for crashlytics reporting\n   * https://firebase.google.com/docs/crashlytics/customize-crash-reports?authuser=0#set_user_ids\n   * @param {string} userId value to set the userId\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  setCrashlyticsUserId(userId: string): Promise<any> {\n    return;\n  }\n\n  /**\n   * Sends an SMS to the user with the SMS verification code and returns the Verification ID required to sign in using phone authentication\n   * @param {string} phoneNumber The phone number, including '+' and country code\n   * @param {number} timeoutDuration (Android only) The timeout in sec - no more SMS will be sent to this number until this timeout expires\n   * @returns {Promise<any>}\n   */\n  @Cordova({\n    platforms: ['Android', 'iOS'],\n    successIndex: 2,\n    errorIndex: 3\n  })\n  verifyPhoneNumber(\n    phoneNumber: string,\n    timeoutDuration = 0\n  ): Promise<any> {\n    return;\n  }\n\n  /**\n   * Clear all pending notifications from the drawer\n   * @return {Promise<any>}\n   */\n  clearAllNotifications(): Promise<any> {\n    return;\n  }\n}\n"]}